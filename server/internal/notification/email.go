package notification

import (
	"fmt"
	"net/smtp"
	"strings"
	"time"

	"github.com/user/alerting/server/internal/config"
	"github.com/user/alerting/server/internal/logging"
)

type NotificationType string

const (
	NotificationTypeError NotificationType = "error"
	NotificationTypeFatal NotificationType = "fatal"
)

type EmailService struct {
	config config.EmailConfig
	logger *logging.Logger
}

func NewEmailService(cfg config.EmailConfig, logger *logging.Logger) *EmailService {
	service := &EmailService{
		config: cfg,
		logger: logger,
	}

	if cfg.Enabled {
		logger.Info("Email notifications enabled - direct sending mode")
	} else {
		logger.Info("Email notifications disabled")
	}

	return service
}

func (s *EmailService) NotifyError(err error, context string) {
	if !s.config.Enabled {
		return
	}

	subject := fmt.Sprintf("ERROR ALERT: %s", context)
	body := formatErrorEmail(err, context)

	if err := s.sendDirectly(subject, body); err != nil {
		s.logger.Warnf("Failed to send error email notification: %v", err)
	} else {
		s.logger.Infof("Sent error email notification: %s", subject)
	}
}

func (s *EmailService) NotifyFatal(err error, context string) {
	if !s.config.Enabled {
		return
	}

	subject := fmt.Sprintf("FATAL ALERT: %s", context)
	body := formatErrorEmail(err, context)

	if err := s.sendDirectly(subject, body); err != nil {
		s.logger.Warnf("Failed to send fatal email notification: %v", err)
	} else {
		s.logger.Infof("Sent fatal email notification: %s", subject)
	}
}

func (s *EmailService) sendDirectly(subject string, body string) error {
	if len(s.config.ToAddresses) == 0 {
		return fmt.Errorf("no recipient email addresses configured")
	}

	to := strings.Join(s.config.ToAddresses, ", ")
	message := []byte(fmt.Sprintf("To: %s\r\nSubject: %s\r\n\r\n%s", to, subject, body))

	auth := smtp.PlainAuth("", s.config.Username, s.config.Password, s.config.SMTPHost)
	addr := fmt.Sprintf("%s:%d", s.config.SMTPHost, s.config.SMTPPort)
	if err := smtp.SendMail(addr, auth, s.config.FromAddress, s.config.ToAddresses, message); err != nil {
		return fmt.Errorf("failed to send email: %w", err)
	}

	return nil
}

func formatErrorEmail(err error, context string) string {
	timestamp := time.Now().Format(time.RFC3339)
	return fmt.Sprintf(`
ALERT: A critical issue has been detected in the system

Time: %s
Context: %s
Error: %s

This email was automatically generated by the alerting system.
`, timestamp, context, err.Error())
}
